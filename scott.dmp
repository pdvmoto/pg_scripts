--
-- PostgreSQL database dump
--

-- Dumped from database version 11.2-YB-2.17.0.0-b0
-- Dumped by pg_dump version 12.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: cnt(text); Type: FUNCTION; Schema: public; Owner: scott
--

CREATE FUNCTION public.cnt(txt_table text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
  sql_stmnt TEXT;
  n_cnt BIGINT := 0 ;
  txt_out TEXT := '';
BEGIN

  txt_table := trim ( txt_table ) ;
  sql_stmnt := 'select count (*) as "cnt of ' || txt_table || '" from ' || txt_table || ';' ;

  -- RAISE NOTICE 'fn_cnt : counting [%], % , stmnt [%] ', txt_table, n_cnt, sql_stmnt ; 

  EXECUTE sql_stmnt INTO n_cnt ;

  txt_out := ' ' || txt_table || ' : ' || n_cnt ;
  
  RETURN txt_out ;

END;
$$;


ALTER FUNCTION public.cnt(txt_table text) OWNER TO scott;

--
-- Name: fn_cnt_i(text); Type: FUNCTION; Schema: public; Owner: scott
--

CREATE FUNCTION public.fn_cnt_i(txt_table text) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
  e TEXT;
  sql_stmnt TEXT;
  n_cnt BIGINT := 0 ;
BEGIN

  txt_table := trim ( txt_table ) ;
  sql_stmnt := 'select count (*) as "cnt of ' || txt_table || '" from ' || txt_table || ';' ;

  -- RAISE NOTICE 'fn_cnt : counting [%], % , stmnt [%] ', txt_table, n_cnt, sql_stmnt ; 

  EXECUTE sql_stmnt INTO n_cnt ;

  RETURN n_cnt ;

END;
$$;


ALTER FUNCTION public.fn_cnt_i(txt_table text) OWNER TO scott;

--
-- Name: fnnumbertowords(bigint); Type: FUNCTION; Schema: public; Owner: scott
--

CREATE FUNCTION public.fnnumbertowords(n bigint) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
  e TEXT;
BEGIN

  WITH Below20(Word, Id) AS
  (
    VALUES
      ('Zero', 0), ('One', 1),( 'Two', 2 ), ( 'Three', 3),
      ( 'Four', 4 ), ( 'Five', 5 ), ( 'Six', 6 ), ( 'Seven', 7 ),
      ( 'Eight', 8), ( 'Nine', 9), ( 'Ten', 10), ( 'Eleven', 11 ),
      ( 'Twelve', 12 ), ( 'Thirteen', 13 ), ( 'Fourteen', 14),
      ( 'Fifteen', 15 ), ('Sixteen', 16 ), ( 'Seventeen', 17),
      ('Eighteen', 18 ), ( 'Nineteen', 19 )
   ),
   Below100(Word, Id) AS
   (
      VALUES
       ('Twenty', 2), ('Thirty', 3),('Forty', 4), ('Fifty', 5),
       ('Sixty', 6), ('Seventy', 7), ('Eighty', 8), ('Ninety', 9)
   )
   SELECT
     CASE
      WHEN n = 0 THEN  ''
      WHEN n BETWEEN 1 AND 19
        THEN (SELECT Word FROM Below20 WHERE ID=n)
     WHEN n BETWEEN 20 AND 99
       THEN  (SELECT Word FROM Below100 WHERE ID=n/10) ||  '-'  ||
             fnNumberToWords( n % 10)
     WHEN n BETWEEN 100 AND 999
       THEN  (fnNumberToWords( n / 100)) || ' Hundred ' ||
           fnNumberToWords( n % 100)
     WHEN n BETWEEN 1000 AND 999999
       THEN  (fnNumberToWords( n / 1000)) || ' Thousand ' ||
           fnNumberToWords( n % 1000)
     WHEN n BETWEEN 1000000 AND 999999999
       THEN  (fnNumberToWords( n / 1000000)) || ' Million ' ||
           fnNumberToWords( n % 1000000)
     WHEN n BETWEEN 1000000000 AND 999999999999
       THEN  (fnNumberToWords( n / 1000000000)) || ' Billion ' ||
           fnNumberToWords( n % 1000000000)
     WHEN n BETWEEN 1000000000000 AND 999999999999999
       THEN  (fnNumberToWords( n / 1000000000000)) || ' Trillion ' ||
           fnNumberToWords( n % 1000000000000)
    WHEN n BETWEEN 1000000000000000 AND 999999999999999999
       THEN  (fnNumberToWords( n / 1000000000000000)) || ' Quadrillion ' ||
           fnNumberToWords( n % 1000000000000000)
    WHEN n BETWEEN 1000000000000000000 AND 999999999999999999999
       THEN  (fnNumberToWords( n / 1000000000000000000)) || ' Quintillion ' ||
           fnNumberToWords( n % 1000000000000000000)
          ELSE ' INVALID INPUT' END INTO e;

  e := RTRIM(e);

  IF RIGHT(e,1)='-' THEN
    e := RTRIM(LEFT(e,length(e)-1));
  END IF;

  RETURN e;
END;
$$;


ALTER FUNCTION public.fnnumbertowords(n bigint) OWNER TO scott;

SET default_tablespace = '';

--
-- Name: dept; Type: TABLE; Schema: public; Owner: scott
--

CREATE TABLE public.dept (
    deptno integer NOT NULL,
    dname character varying(14),
    loc character varying(13)
);


ALTER TABLE public.dept OWNER TO scott;

--
-- Name: emp; Type: TABLE; Schema: public; Owner: scott
--

CREATE TABLE public.emp (
    empno integer NOT NULL,
    ename character varying(10),
    job character varying(9),
    mgr integer,
    hiredate timestamp without time zone,
    sal real,
    comm real,
    deptno integer
);


ALTER TABLE public.emp OWNER TO scott;

--
-- Name: jobdesc; Type: TABLE; Schema: public; Owner: scott
--

CREATE TABLE public.jobdesc (
    job character varying(9) NOT NULL,
    job_desc character varying(32)
);


ALTER TABLE public.jobdesc OWNER TO scott;

--
-- Data for Name: dept; Type: TABLE DATA; Schema: public; Owner: scott
--

COPY public.dept (deptno, dname, loc) FROM stdin;
40	OPERATIONS	BOSTON
10	ACCOUNTING	NEW YORK
30	SALES	CHICAGO
20	RESEARCH	DALLAS
\.


--
-- Data for Name: emp; Type: TABLE DATA; Schema: public; Owner: scott
--

COPY public.emp (empno, ename, job, mgr, hiredate, sal, comm, deptno) FROM stdin;
7788	SCOTT	ANALYST	7566	1982-12-09 00:00:00	3000	\N	20
7521	WARD	SALESMAN	7698	1981-02-22 00:00:00	1250	500	30
7876	ADAMS	CLERK	7788	1983-01-12 00:00:00	1100	\N	20
7839	KING	PRESIDENT	\N	1981-11-17 00:00:00	5000	\N	10
7698	BLAKE	MANAGER	7839	1981-05-01 00:00:00	2850	\N	30
7902	FORD	ANALYST	7566	1981-12-03 00:00:00	3000	\N	20
7566	JONES	MANAGER	7839	1981-04-02 00:00:00	2975	\N	20
7844	TURNER	SALESMAN	7698	1981-09-08 00:00:00	1500	0	30
7654	MARTIN	SALESMAN	7698	1981-09-28 00:00:00	1250	1400	30
7934	MILLER	CLERK	7782	1982-01-23 00:00:00	1300	\N	40
7782	CLARK	MANAGER	7839	1981-06-09 00:00:00	2450	\N	10
7499	ALLEN	SALESMAN	7698	1981-02-20 00:00:00	1600	300	30
7369	SMITH	CLERK	7902	1980-12-17 00:00:00	800	\N	20
7900	JAMES	CLERK	7698	1981-12-03 00:00:00	950	\N	30
\.


--
-- Data for Name: jobdesc; Type: TABLE DATA; Schema: public; Owner: scott
--

COPY public.jobdesc (job, job_desc) FROM stdin;
SALESMAN	salesmandescript
CLERK	clerkdescript
PRESIDENT	presidentdescript
MANAGER	managerdescript
ANALYST	analystdescript
\.


--
-- Name: jobdesc jobdesc_pk; Type: CONSTRAINT; Schema: public; Owner: scott
--

ALTER TABLE ONLY public.jobdesc
    ADD CONSTRAINT jobdesc_pk PRIMARY KEY (job);


--
-- Name: dept pk_dept; Type: CONSTRAINT; Schema: public; Owner: scott
--

ALTER TABLE ONLY public.dept
    ADD CONSTRAINT pk_dept PRIMARY KEY (deptno);


--
-- Name: emp emp_job_fk; Type: FK CONSTRAINT; Schema: public; Owner: scott
--

ALTER TABLE ONLY public.emp
    ADD CONSTRAINT emp_job_fk FOREIGN KEY (job) REFERENCES public.jobdesc(job);


--
-- Name: emp fk_emp_dept; Type: FK CONSTRAINT; Schema: public; Owner: scott
--

ALTER TABLE ONLY public.emp
    ADD CONSTRAINT fk_emp_dept FOREIGN KEY (deptno) REFERENCES public.dept(deptno);


--
-- PostgreSQL database dump complete
--

